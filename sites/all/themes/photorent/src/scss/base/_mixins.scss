/* | Mixings & Function |
============================================= */

// | MIXIN | ============================================= */

// center vertical/horizontal
@mixin center($xy) {
    position: absolute;

    @if $xy == xy {
        left: 50%;
        top: 50%;
        bottom: auto;
        right: auto;
        transform: translateX(-50%) translateY(-50%);
    }
    @else if $xy == x {
        left: 50%;
        right: auto;
        transform: translateX(-50%);
    }
    @else if $xy == y {
        top: 50%;
        bottom: auto;
        transform: translateY(-50%);
    }
}

// Scroll Vertical
@mixin scroll-y {

    overflow-y: auto;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch;

}

//typography and main elements

@mixin title-h2 {
    font-family: $secondary-font-family;
    font-weight: bold;
    font-size: 4em;
    color: $color-primary;
    @include respond-to(phone){
        font-size: 2rem;
    }
}

@mixin title-p {
    color: $text-color-secondary;
    @include respond-to(phone){
        font-size: 1.2rem;
    }
}

@mixin button-cta{
    display: block;
    background-color: $color-primary;
    color: $text-color-white;
}

// apparance none
@mixin apparence-none {
    -webkit-appearance: none;
       -moz-appearance: none;
        -ms-appearance: none;
         -o-appearance: none;
            appearance: none;

    &::-ms-expand {
      display: none;
    }
}

// placeholder
@mixin placeholder {
    &:-moz-placeholder { @content; } // Firefox 4-18
    &::-moz-placeholder { opacity: 1; @content; } // Firefox 19+
    &:-ms-input-placeholder { @content; } // Internet Explorer 10+
    &::-webkit-input-placeholder { @content; } // Safari and Chrome
}

// opacity
@mixin opacity($opacity) {

    opacity: $opacity;
    filter: unquote("alpha(opacity=#{round($opacity * 100)})");
    -moz-opacity: $opacity;
    -khtml-opacity: $opacity;

}

// transition
@mixin transition-all {

    -moz-transition: all 0.5s ease;
    -webkit-transition: all 0.5s ease;
    -o-transition: all 0.5s ease;
    -ms-transition: all 0.5s ease;
    transition: all 0.5s ease;

}

@mixin transition-all-fast {

    -moz-transition: all 0.2s ease;
    -webkit-transition: all 0.2s ease;
    -o-transition: all 0.2s ease;
    -ms-transition: all 0.2s ease;
    transition: all 0.2s ease;

}

@mixin transition($name, $duration: 0.5s, $timing-function: ease) {

    -moz-transition: $name $duration $timing-function;
    -webkit-transition: $name $duration $timing-function;
    -o-transition: $name $duration $timing-function;
    -ms-transition: $name $duration $timing-function;
    transition: $name $duration $timing-function;

}

// | Animation |
@mixin animation($name, $duration: 1s, $delay: 0.2s, $timing-function: ease, $iterations: infinite) {

    -webkit-animation: $name $duration $iterations $timing-function $delay;
    -moz-animation: $name $duration $iterations $timing-function $delay;
    -o-animation: $name $duration $iterations $timing-function $delay;
    animation: $name $duration $iterations $timing-function $delay;

}


// gradient
@mixin gradient($top-color, $bottom-color) {

    background: $bottom-color;
    background: -moz-linear-gradient(top, $top-color, $bottom-color 100%);
    background: -webkit-gradient(linear, lefttop, leftbottom, color-stop(0%,$top-color), color-stop(100%,$bottom-color));
    background: -webkit-linear-gradient(top, $top-color 0%,$bottom-color 100%);
    background: -o-linear-gradient(top, $top-color 0%,$bottom-color 100%);
    background: -ms-linear-gradient(top, $top-color 0%,$bottom-color 100%);
    background: linear-gradient(to bottom, $top-color 0%,$bottom-color 100%);
      filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#{ie-hex-str($top-color)}', endColorstr='#{ie-hex-str($bottom-color)}',GradientType=0 );

}


@mixin font-size($size) {
    font-size: $size;
    font-size: rem-calc($size);
}

// testo troncato
@mixin abstract {

    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

}

// text rendering
@mixin text-render {

  text-rendering: optimizeLegibility;

}

// reset list
@mixin reset-list {

  margin: 0;
  padding: 0;
  list-style: none; list-style-image: none;
  font-size: 1em;

}

//clearfix
@mixin clearfix {

    *zoom: 1;
    &:before,
    &:after {
        display: table;
        content:'';
        line-height: 0;
    }
    &:after {
        clear: both;
    }

}

// triangolo
@mixin triangle($direction, $size, $color) {

    content: '';
    display: block;
    position: absolute;
    height: 0; width: 0;

    @if ($direction == 'up'){

        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;

    }
    @else if ($direction == 'down'){

        border-top: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;

    }
    @else if ($direction == 'left'){

        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;

    }
    @else if ($direction == 'right'){

        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;

    }

}


// | FUNCTION | ============================================= */

@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}

// Calculate rems from a px value
@function rem-calc($px, $base-val: $base-px-default) {
  @if not unitless($px) {
    $px: strip-units($px);
  }
  @if not unitless($base-val) {
    $base-val: strip-units($base-val);
  }
  @return ($px / $base-val) * 1rem;
}

// Calculate ems from a px value
@function em-calc($px, $base-val: $base-px-default) {
  @if not unitless($px) {
    $px: strip-units($px);
  }
  @if not unitless($base-val) {
    $base-val: strip-units($base-val);
  }
  @return ($px / $base-val) * 1em;
}


